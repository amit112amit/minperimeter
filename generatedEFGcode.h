#ifndef __GENERATEDEFG_CODE_H__
#define __GENERATEDEFG_CODE_H__

#include <tuple>
#include "settings.h"

typedef std::tuple<scalar, scalar, scalar> tuple3;

struct EFGFunc{

    tuple3 operator()(const scalar r, const scalar t, const scalar a, const scalar b){
        /* Function generated by `generatecode.py` */
        //############## Sub-expressions ##############
        scalar x0 = math::sin(t);
        scalar x1 = math::cos(t);
        scalar x2 = r*x1;
        scalar x3 = PI*(a + x2);
        scalar x4 = r*x0;
        scalar x5 = PI*(b + x4);
        scalar x6 = math::sin(x3)*math::sin(x5);
        scalar x7 = x0*x6;
        scalar x8 = math::cos(x3)*math::cos(x5);
        scalar x9 = x1*x8;
        scalar x10 = PI*(5*a + 5*x2);
        scalar x11 = PI*(5*b + 5*x4);
        scalar x12 = math::cos(x10)*math::cos(x11);
        scalar x13 = 0.36036036036036034*x0;
        scalar x14 = math::sin(x10)*math::sin(x11);
        scalar x15 = 0.36036036036036034*x1;
        scalar x16 = PI*PI;
        scalar x17 = 0.30802500000000005*x16;
        scalar x18 = x0*x0 + x1*x1;
        scalar x19 = 0.20000000000000001*x0;
        scalar x20 = 0.20000000000000001*x1;
        scalar x21 = x0*x8;
        scalar x22 = x1*x6;

        //############## Final Expressions ##############
        scalar E = x17*math::pow(-x12*x13 + x14*x15 + x7 - x9, 2) + x18;
        scalar F = -r*x16*(-x12*x19 + x14*x20 + 0.55500000000000005*x7 - 0.55500000000000005*x9)*(x12*x20 + x14*x19 - 0.55500000000000005*x21 - 0.55500000000000005*x22);
        scalar G = r*r*(x17*math::pow(x12*x15 + x13*x14 - x21 - x22, 2) + x18);

        return {E, F, G};
    }
};
#endif //__GENERATEDEFG_CODE_H__
