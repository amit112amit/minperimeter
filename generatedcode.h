#ifndef __GENERATED_CODE_H__
#define __GENERATED_CODE_H__

#include <tuple>
#include "settings.h"

typedef std::tuple<scalar, scalar, scalar, scalar, scalar, scalar, scalar, scalar, scalar, scalar, scalar, scalar> tuple12;

struct firstfundaformterms{

    tuple12 operator()(const scalar r, const scalar t, const scalar a, const scalar b){
        /* Function generated by `generatecode.py` */
        //############## Sub-expressions ##############
        scalar x0 = math::sin(t);
        scalar x1 = math::cos(t);
        scalar x2 = r*x1;
        scalar x3 = PI*(a + x2);
        scalar x4 = math::sin(x3);
        scalar x5 = r*x0;
        scalar x6 = PI*(b + x5);
        scalar x7 = math::sin(x6);
        scalar x8 = x4*x7;
        scalar x9 = x0*x8;
        scalar x10 = math::cos(x3);
        scalar x11 = math::cos(x6);
        scalar x12 = x10*x11;
        scalar x13 = x1*x12;
        scalar x14 = PI*(5*a + 5*x2);
        scalar x15 = math::cos(x14);
        scalar x16 = PI*(5*b + 5*x5);
        scalar x17 = math::cos(x16);
        scalar x18 = x15*x17;
        scalar x19 = 0.36036036036036034*x0;
        scalar x20 = math::sin(x14);
        scalar x21 = math::sin(x16);
        scalar x22 = x20*x21;
        scalar x23 = 0.36036036036036034*x1;
        scalar x24 = -x13 - x18*x19 + x22*x23 + x9;
        scalar x25 = PI*PI;
        scalar x26 = 0.30802500000000005*x25;
        scalar x27 = x1*x1;
        scalar x28 = x0*x0;
        scalar x29 = x27 + x28;
        scalar x30 = 0.20000000000000001*x0;
        scalar x31 = 0.20000000000000001*x1;
        scalar x32 = -0.55500000000000005*x13 - x18*x30 + x22*x31 + 0.55500000000000005*x9;
        scalar x33 = x0*x12;
        scalar x34 = x1*x8;
        scalar x35 = x18*x31 + x22*x30 - 0.55500000000000005*x33 - 0.55500000000000005*x34;
        scalar x36 = r*x35;
        scalar x37 = r*r;
        scalar x38 = x18*x23 + x19*x22 - x33 - x34;
        scalar x39 = 2*x28;
        scalar x40 = x11*x4;
        scalar x41 = 2*x27;
        scalar x42 = x10*x7;
        scalar x43 = x0*x1*x42;
        scalar x44 = x15*x21;
        scalar x45 = x28*x44;
        scalar x46 = 3.6036036036036032*x27;
        scalar x47 = x17*x20;
        scalar x48 = x0*x47;
        scalar x49 = x1*x48;
        scalar x50 = math::pow(PI, 3);
        scalar x51 = 0.30802500000000005*x50;
        scalar x52 = x24*x51;
        scalar x53 = 0.55500000000000005*x40;
        scalar x54 = 1.0*x44;
        scalar x55 = PI*r;
        scalar x56 = x28*x55;
        scalar x57 = 1.0*x47;
        scalar x58 = 0.55500000000000005*x42;
        scalar x59 = x27*x55;
        scalar x60 = x42*x55;
        scalar x61 = 2*x1;
        scalar x62 = x40*x61;
        scalar x63 = 3.6036036036036032*x44;
        scalar x64 = x1*x63;
        scalar x65 = 2*x0;
        scalar x66 = x42*x65 + 3.6036036036036032*x48;
        scalar x67 = x1*x47;
        scalar x68 = 1.0*x67;
        scalar x69 = x1*x58;
        scalar x70 = x0*x53 + x0*x54;
        scalar x71 = x1*x54;
        scalar x72 = x1*x53;
        scalar x73 = x0*x58 + 1.0*x48;
        scalar x74 = r*x50;
        scalar x75 = x42*x61;
        scalar x76 = 3.6036036036036032*x67;
        scalar x77 = x0*x63 + x40*x65;
        scalar x78 = x37*x38*x51;

        //############## Final Expressions ##############
        scalar E = x24*x24*x26 + x29;
        scalar F = -x25*x32*x36;
        scalar G = x37*(x26*x38*x38 + x29);
        scalar Er = x52*(x39*x40 + x40*x41 + 4*x43 + x44*x46 + 3.6036036036036032*x45 + 7.2072072072072064*x49);
        scalar Fr = -x25*(x32*(x35 + x56*x57 + x56*x58 - x57*x59 - x58*x59) + PI*x36*(x27*x53 + x27*x54 + x28*x53 + 1.1100000000000001*x43 + 1.0*x45 + 2.0*x49));
        scalar Gr = r*(x26*x38*(0.72072072072072069*x0*x22 + 0.72072072072072069*x1*x18 - 2*x33 - 2*x34 + x39*x60 - x41*x60 - x46*x47*x55 + 3.6036036036036032*x47*x56) + x39 + x41);
        scalar Ea = x52*(x62 + x64 + x66);
        scalar Fa = -x74*(x32*(-x68 - x69 + x70) + x35*(x71 + x72 + x73));
        scalar Ga = x78*(-x75 - x76 + x77);
        scalar Eb = x52*(x75 + x76 + x77);
        scalar Fb = -x74*(x32*(-x71 - x72 + x73) + x35*(x68 + x69 + x70));
        scalar Gb = x78*(-x62 - x64 + x66);

        return {E, F, G, Er, Fr, Gr, Ea, Fa, Ga, Eb, Fb, Gb};
    }
};
#endif //__GENERATED_CODE_H__
